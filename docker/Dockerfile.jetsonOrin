# OS SETTINGS
# Here you can choose the OS and the CUDA version you want to mount 
FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0

# -----------------------------------------------------------------------------------------------------------------------------------------------------
# ENVIRONMENT SETTINGS
# In this section we want to specify which softwares we want to pre-install within the docker

# to be sure we set non interactive bash also here
ENV DEBIAN_FRONTEND=noninteractive

# configuration for x11 forwarding
LABEL com.nvidia.volumes.needed="nvidia-docker"
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV PATH=/usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y -q \
    x11-apps mesa-utils && rm -rf /var/lib/apt/lists/*

# remove all the packages within Debian base configuration (not wasting time installing things that will not be used)
RUN rm -f /etc/apt/sources.list.d/*.list

# install Ubuntu Software needed for the development (DEBIAN_FRONTEND="noninteractive" needed to avoid human interaction in the process)
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" && apt-get install -y -q\
    sudo \
    git \
    tmux \
    nano \
    curl \
    wget \
    bash \
    bash-completion \
    build-essential \
    ffmpeg \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3-tk \
&& rm -rf /var/lib/apt/lists/*

# set python update alternatives - the highest is the preferred one
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
RUN update-alternatives --config python3

# remove python2
RUN ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# -----------------------------------------------------------------------------------------------------------------------------------------------------
# USER SETTINGS

# the docker's user will be $USER and its home will be '/$USER/home'
ARG UID=1000
ARG GID=1000
ARG USER_NAME=user
ARG USER_HOME=/home/$USER_NAME

# create a new user within the Docker container
RUN groupadd -g $GID -o $USER_NAME \
    && useradd -m -u $UID -g $GID -o -s /bin/bash $USER_NAME \
    && echo "$USER_NAME:Docker!" | chpasswd \
    && mkdir -p /src && chown -R $USER_NAME:$USER_NAME /src \
    && mkdir -p /etc/sudoers.d \
    && usermod -aG video $USER_NAME \
    && echo "$USER_NAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USER_NAME

# -----------------------------------------------------------------------------------------------------------------------------------------------------
# FINAL SETUPS

# upgrade python pip
RUN pip install --upgrade pip

# install python packages in requirements directory
# project/
# |-- ai-base-docker/
# |   |   |-- build.sh
# |   |   |-- Dockerfile
# |   |   |-- run.sh
# |-- src/
# |   |   |-- model/
# |   |   |-- utils/
# |   |   |-- requirements/
# |   |       |-- base.txt
# |   |       |-- devel.txt


RUN wget https://developer.download.nvidia.com/compute/cusparselt/0.6.3/local_installers/cusparselt-local-tegra-repo-ubuntu2204-0.6.3_1.0-1_arm64.deb && \
    sudo dpkg -i cusparselt-local-tegra-repo-ubuntu2204-0.6.3_1.0-1_arm64.deb && \
    sudo cp /var/cusparselt-local-tegra-repo-ubuntu2204-0.6.3/cusparselt-*-keyring.gpg /usr/share/keyrings/ 

RUN apt-get update && DEBIAN_FRONTEND="noninteractive" && apt-get install -y -q\
    libgtk2.0-dev \
    pkg-config \
    libcusparselt0 \
    libcusparselt-dev \
    libopenmpi-dev \
    libopenblas-dev

RUN mkdir -p ./tmp
COPY ./src/requirements/* ./tmp/

ENV REQUIREMENTS_FILES="jetson_orin.txt "

RUN for file in $REQUIREMENTS_FILES; do \
        python3 -m pip install -r ./tmp/$file; \
    done

RUN sed -i "s/return {\"ksize\": int(random.choice(np.arange(self.blur_limit\[0\], self.blur_limit\[1\] + 1, 2)))}$/return {\"ksize\": int(random.choice(np.arange(self.blur_limit[0], self.blur_limit[1] + 1, 2).tolist()))}/" \
    /usr/local/lib/python3.10/dist-packages/albumentations/augmentations/transforms.py

RUN python3 -m pip download --only-binary :all: --dest . --no-cache http://jetson.webredirect.org/jp6/cu126/+f/5cf/9ed17e35cb752/torch-2.5.0-cp310-cp310-linux_aarch64.whl#sha256=5cf9ed17e35cb7523812aeda9e7d6353c437048c5a6df1dc6617650333049092
RUN python3 -m pip install ./torch-2.5.0-cp310-cp310-linux_aarch64.whl
RUN python3 -m pip download --only-binary :all: --dest . --no-cache http://jetson.webredirect.org/jp6/cu126/+f/5f9/67f920de3953f/torchvision-0.20.0-cp310-cp310-linux_aarch64.whl#sha256=5f967f920de3953f2a39d95154b1feffd5ccc06b4589e51540dc070021a9adb9
RUN python3 -m pip install ./torchvision-0.20.0-cp310-cp310-linux_aarch64.whl
RUN python3 -m pip download --only-binary :all: --dest . http://jetson.webredirect.org/jp6/cu126/+f/812/4fbc4ba6df0a3/torchaudio-2.5.0-cp310-cp310-linux_aarch64.whl#sha256=8124fbc4ba6df0a30b1d8176aa5ce6f571c2dd5263e6401109d2e29708352c97
RUN python3 -m pip install ./torchaudio-2.5.0-cp310-cp310-linux_aarch64.whl

RUN pip3 install onnx==1.17.0
RUN wget http://jetson.webredirect.org/jp6/cu126/+f/97d/e894e562ead63/pycuda-2024.1.2-cp310-cp310-linux_aarch64.whl#sha256=97de894e562ead63d6fa3aa79d4c947ed7cd9fd75cc8920b712475cc6ff69b7f -O pycuda-2024.1.2-cp310-cp310-linux_aarch64.whl
RUN wget http://jetson.webredirect.org/jp6/cu126/+f/0c4/18beb3326027d/onnxruntime_gpu-1.20.0-cp310-cp310-linux_aarch64.whl#sha256=0c418beb3326027d83acc283372ae42ebe9df12f71c3a8c2e9743a4e323443a4 -O onnxruntime_gpu-1.20.0-cp310-cp310-linux_aarch64.whl
RUN pip3 install pycuda-2024.1.2-cp310-cp310-linux_aarch64.whl
RUN pip3 install onnxruntime_gpu-1.20.0-cp310-cp310-linux_aarch64.whl

USER $USER_NAME
WORKDIR $USER_HOME

# remove all the created/copied/moved file by the docker
RUN rm -rf *

# when the container is launched it will start a bash session
CMD ["/bin/bash"]
