# OS SETTINGS
# Here you can choose the OS and the CUDA version you want to mount 

FROM nvcr.io/nvidia/tensorrt:24.07-py3

# -----------------------------------------------------------------------------------------------------------------------------------------------------
# ENVIRONMENT SETTINGS
# In this section we want to specify which softwares we want to pre-install within the docker

# to be sure we set non interactive bash also here
ENV DEBIAN_FRONTEND=noninteractive

# configuration for x11 forwarding
LABEL com.nvidia.volumes.needed="nvidia-docker"
ENV PATH /usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y -q \
    x11-apps mesa-utils && rm -rf /var/lib/apt/lists/*

# remove all the packages within Debian base configuration (not wasting time installing things that will not be used)
RUN rm -f /etc/apt/sources.list.d/*.list

# install Ubuntu Software needed for the development (DEBIAN_FRONTEND="noninteractive" needed to avoid human interaction in the process)
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" && apt-get install -y -q\
    sudo \
    git \
    tmux \
    nano \
    curl \
    wget \
    bash \
    bash-completion \
    build-essential \
    ffmpeg \
    python3.11 \
    python3.11-dev \
    python3-pip \
    python3-tk \
&& rm -rf /var/lib/apt/lists/*

# set python update alternatives - the highest is the preferred one
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 2
RUN update-alternatives --config python3

# remove python2
RUN ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# -----------------------------------------------------------------------------------------------------------------------------------------------------
# USER SETTINGS

# the docker's user will be $USER and its home will be '/$USER/home'
ARG UID=1000
ARG GID=1000
ARG USER_NAME=user
ARG USER_HOME=/home/$USER_NAME

# create a new user within the Docker container
RUN groupadd -g $GID -o $USER_NAME \
    && useradd -m -u $UID -g $GID -o -s /bin/bash $USER_NAME \
    && echo "$USER_NAME:Docker!" | chpasswd \
    && mkdir -p /src && chown -R $USER_NAME:$USER_NAME /src \
    && mkdir -p /etc/sudoers.d \
    && usermod -aG video $USER_NAME \
    && echo "$USER_NAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USER_NAME

# -----------------------------------------------------------------------------------------------------------------------------------------------------
# FINAL SETUPS

# upgrade python pip
RUN pip install --upgrade pip

# install python packages in requirements directory
# project/
# |-- ai-base-docker/
# |   |   |-- build.sh
# |   |   |-- Dockerfile
# |   |   |-- run.sh
# |-- src/
# |   |   |-- model/
# |   |   |-- utils/
# |   |   |-- requirements/
# |   |       |-- base.txt
# |   |       |-- devel.txt

RUN apt-get update && DEBIAN_FRONTEND="noninteractive" && apt-get install -y -q\
    libgtk2.0-dev \
    pkg-config

RUN mkdir -p ./tmp
COPY ./src/requirements/* ./tmp/

ENV REQUIREMENTS_FILES="requirements.txt "

RUN for file in $REQUIREMENTS_FILES; do \
        python3 -m pip install -r ./tmp/$file; \
    done

RUN sed -i "s/return {\"ksize\": int(random.choice(np.arange(self.blur_limit\[0\], self.blur_limit\[1\] + 1, 2)))}$/return {\"ksize\": int(random.choice(np.arange(self.blur_limit[0], self.blur_limit[1] + 1, 2).tolist()))}/" \
    /usr/local/lib/python3.11/dist-packages/albumentations/augmentations/transforms.py


RUN apt-get update && apt-get install -y -q \
    protobuf-compiler \
    libprotobuf-dev \
    libgtk2.0-dev \
    pkg-config \
    libopenmpi-dev \
    libopenblas-dev


RUN python3 -m pip install \
    onnx \
    pycuda \
    onnxruntime-gpu \
    tensorrt

USER $USER_NAME
WORKDIR $USER_HOME

# remove all the created/copied/moved file by the docker
RUN rm -rf *

# when the container is launched it will start a bash session
CMD ["/bin/bash"]
